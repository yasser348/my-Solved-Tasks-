{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5e9602b0",
   "metadata": {},
   "source": [
    "# The KNN Algorithm For classification"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cdcfab2",
   "metadata": {},
   "source": [
    "<blockquote>First, we woulod import the modules</blockquote>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b5c6853e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import train_test_split,cross_val_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67a58093",
   "metadata": {},
   "source": [
    "<blockquote>then,we would import the data as a csv file</blockquote>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "36eb96fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv(\"C:\\\\Users\\\\somy\\\\Downloads\\\\stack-overflow-developer-survey-2020\\\\breast-cancer-wisconsinData.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8d417ad",
   "metadata": {},
   "source": [
    "<blockquote>i left a file called \"names\" to get more info about the data<blockquote>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90304e84",
   "metadata": {},
   "source": [
    "<b> before start in coding i consider you know what is the KNN algorithm is,if you do not,visit:\n",
    "<li>https://www.youtube.com/watch?v=4HKqjENq9OU</li>\n",
    "<li> https://towardsdatascience.com/machine-learning-classifiers-a5cc4e1b0623\n",
    "<li>https://towardsdatascience.com/machine-learning-basics-with-the-k-nearest-neighbors-algorithm-6a6e71d01761<li>\n",
    "     <blockquote>these links will help you to understand the algorithm<blockquote>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "513f5e62",
   "metadata": {},
   "source": [
    "<b>we will explore the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0ff6fa52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(699, 11)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1ba0c6d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample code number             0\n",
      "Clump Thickness                0\n",
      "Uniformity of Cell Size        0\n",
      "Uniformity of Cell Shape       0\n",
      "Marginal Adhesion              0\n",
      "Single Epithelial Cell Size    0\n",
      "Bare Nuclei                    0\n",
      "Bland Chromatin                0\n",
      "Normal Nucleoli                0\n",
      "Mitoses                        0\n",
      "Class                          0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(data.isna().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a8d41206",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sample code number</th>\n",
       "      <th>Clump Thickness</th>\n",
       "      <th>Uniformity of Cell Size</th>\n",
       "      <th>Uniformity of Cell Shape</th>\n",
       "      <th>Marginal Adhesion</th>\n",
       "      <th>Single Epithelial Cell Size</th>\n",
       "      <th>Bare Nuclei</th>\n",
       "      <th>Bland Chromatin</th>\n",
       "      <th>Normal Nucleoli</th>\n",
       "      <th>Mitoses</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1182404</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sample code number  Clump Thickness  Uniformity of Cell Size  \\\n",
       "0             1182404                1                        1   \n",
       "\n",
       "   Uniformity of Cell Shape  Marginal Adhesion  Single Epithelial Cell Size  \\\n",
       "0                         1                  1                            2   \n",
       "\n",
       "  Bare Nuclei  Bland Chromatin  Normal Nucleoli  Mitoses  Class  \n",
       "0           1                2                1        1      2  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.mode()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f040c3bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sample code number</th>\n",
       "      <th>Clump Thickness</th>\n",
       "      <th>Uniformity of Cell Size</th>\n",
       "      <th>Uniformity of Cell Shape</th>\n",
       "      <th>Marginal Adhesion</th>\n",
       "      <th>Single Epithelial Cell Size</th>\n",
       "      <th>Bland Chromatin</th>\n",
       "      <th>Normal Nucleoli</th>\n",
       "      <th>Mitoses</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.990000e+02</td>\n",
       "      <td>699.000000</td>\n",
       "      <td>699.000000</td>\n",
       "      <td>699.000000</td>\n",
       "      <td>699.000000</td>\n",
       "      <td>699.000000</td>\n",
       "      <td>699.000000</td>\n",
       "      <td>699.000000</td>\n",
       "      <td>699.000000</td>\n",
       "      <td>699.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.071704e+06</td>\n",
       "      <td>4.417740</td>\n",
       "      <td>3.134478</td>\n",
       "      <td>3.207439</td>\n",
       "      <td>2.806867</td>\n",
       "      <td>3.216023</td>\n",
       "      <td>3.437768</td>\n",
       "      <td>2.866953</td>\n",
       "      <td>1.589413</td>\n",
       "      <td>2.689557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.170957e+05</td>\n",
       "      <td>2.815741</td>\n",
       "      <td>3.051459</td>\n",
       "      <td>2.971913</td>\n",
       "      <td>2.855379</td>\n",
       "      <td>2.214300</td>\n",
       "      <td>2.438364</td>\n",
       "      <td>3.053634</td>\n",
       "      <td>1.715078</td>\n",
       "      <td>0.951273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.163400e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.706885e+05</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.171710e+06</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.238298e+06</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.345435e+07</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Sample code number  Clump Thickness  Uniformity of Cell Size  \\\n",
       "count        6.990000e+02       699.000000               699.000000   \n",
       "mean         1.071704e+06         4.417740                 3.134478   \n",
       "std          6.170957e+05         2.815741                 3.051459   \n",
       "min          6.163400e+04         1.000000                 1.000000   \n",
       "25%          8.706885e+05         2.000000                 1.000000   \n",
       "50%          1.171710e+06         4.000000                 1.000000   \n",
       "75%          1.238298e+06         6.000000                 5.000000   \n",
       "max          1.345435e+07        10.000000                10.000000   \n",
       "\n",
       "       Uniformity of Cell Shape  Marginal Adhesion  \\\n",
       "count                699.000000         699.000000   \n",
       "mean                   3.207439           2.806867   \n",
       "std                    2.971913           2.855379   \n",
       "min                    1.000000           1.000000   \n",
       "25%                    1.000000           1.000000   \n",
       "50%                    1.000000           1.000000   \n",
       "75%                    5.000000           4.000000   \n",
       "max                   10.000000          10.000000   \n",
       "\n",
       "       Single Epithelial Cell Size  Bland Chromatin  Normal Nucleoli  \\\n",
       "count                   699.000000       699.000000       699.000000   \n",
       "mean                      3.216023         3.437768         2.866953   \n",
       "std                       2.214300         2.438364         3.053634   \n",
       "min                       1.000000         1.000000         1.000000   \n",
       "25%                       2.000000         2.000000         1.000000   \n",
       "50%                       2.000000         3.000000         1.000000   \n",
       "75%                       4.000000         5.000000         4.000000   \n",
       "max                      10.000000        10.000000        10.000000   \n",
       "\n",
       "          Mitoses       Class  \n",
       "count  699.000000  699.000000  \n",
       "mean     1.589413    2.689557  \n",
       "std      1.715078    0.951273  \n",
       "min      1.000000    2.000000  \n",
       "25%      1.000000    2.000000  \n",
       "50%      1.000000    2.000000  \n",
       "75%      1.000000    4.000000  \n",
       "max     10.000000    4.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a94fd89",
   "metadata": {},
   "source": [
    "data.columns.tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d55cbc02",
   "metadata": {},
   "source": [
    ">> Those numbers appear in the data for the levels in each column,you could visit:\n",
    "<li>https://www.sciencedirect.com/science/article/pii/S2352914820306092"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c71a4044",
   "metadata": {},
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42be667f",
   "metadata": {},
   "source": [
    "<b> We will drop duplicates to avoid bias in our model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "01ecbc8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3803533d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.drop_duplicates(inplace=True)\n",
    "data.drop(columns=[\"Sample code number\"],inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cd69e35",
   "metadata": {},
   "source": [
    "<b>we are going to see the unique data in every single column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4cb47e64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column Name :  Clump Thickness\n",
      "Column Contents :  [ 5  3  6  4  8  1  2  7 10  9]\n",
      "Column Name :  Uniformity of Cell Size\n",
      "Column Contents :  [ 1  4  8 10  2  3  7  5  6  9]\n",
      "Column Name :  Uniformity of Cell Shape\n",
      "Column Contents :  [ 1  4  8 10  2  3  5  6  7  9]\n",
      "Column Name :  Marginal Adhesion\n",
      "Column Contents :  [ 1  5  3  8 10  4  6  2  9  7]\n",
      "Column Name :  Single Epithelial Cell Size\n",
      "Column Contents :  [ 2  7  3  1  6  4  5  8 10  9]\n",
      "Column Name :  Bare Nuclei\n",
      "Column Contents :  ['1' '10' '2' '4' '3' '9' '7' '?' '5' '8' '6']\n",
      "Column Name :  Bland Chromatin\n",
      "Column Contents :  [ 3  9  1  2  4  5  7  8  6 10]\n",
      "Column Name :  Normal Nucleoli\n",
      "Column Contents :  [ 1  2  7  4  5  3 10  6  9  8]\n",
      "Column Name :  Mitoses\n",
      "Column Contents :  [ 1  5  4  2  3  7 10  8  6]\n",
      "Column Name :  Class\n",
      "Column Contents :  [2 4]\n"
     ]
    }
   ],
   "source": [
    "for columnData in data.iloc[:,:]:\n",
    "    columnData1=data[columnData]\n",
    "    print('Column Name : ', columnData)\n",
    "    x=columnData1.unique()\n",
    "    print('Column Contents : ',x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37256a32",
   "metadata": {},
   "source": [
    "<b> you can note \"Bare Nuclei\" column... And I'm going to pause for a while and tell you something my teacher:\n",
    "    <li>https://github.com/Ahmed-Hereiz\n",
    "    taught me,dealing with missing data makes you model more professional,you can deal with it by a lot methods i chose the EM algorithm,and you can try the technique that makes sense of your data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8199d631",
   "metadata": {},
   "source": [
    ">I ran the test on spss programm and this is my result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3917d0bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "indices = [23,40,139,145,158,164,235,249,275,292,294,297,315,321,411,617]\n",
    "data.loc[indices,'Bare Nuclei'] =[5,8,1,2,2,2,3,2,2,6,1,2,6,2,1,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79771818",
   "metadata": {},
   "source": [
    ">we will check the data agian,and change the type,too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0507bc86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column Name :  Clump Thickness\n",
      "Column Contents :  [ 5  3  6  4  8  1  2  7 10  9]\n",
      "Column Name :  Uniformity of Cell Size\n",
      "Column Contents :  [ 1  4  8 10  2  3  7  5  6  9]\n",
      "Column Name :  Uniformity of Cell Shape\n",
      "Column Contents :  [ 1  4  8 10  2  3  5  6  7  9]\n",
      "Column Name :  Marginal Adhesion\n",
      "Column Contents :  [ 1  5  3  8 10  4  6  2  9  7]\n",
      "Column Name :  Single Epithelial Cell Size\n",
      "Column Contents :  [ 2  7  3  1  6  4  5  8 10  9]\n",
      "Column Name :  Bare Nuclei\n",
      "Column Contents :  [ 1 10  2  4  3  9  7  5  8  6]\n",
      "Column Name :  Bland Chromatin\n",
      "Column Contents :  [ 3  9  1  2  4  5  7  8  6 10]\n",
      "Column Name :  Normal Nucleoli\n",
      "Column Contents :  [ 1  2  7  4  5  3 10  6  9  8]\n",
      "Column Name :  Mitoses\n",
      "Column Contents :  [ 1  5  4  2  3  7 10  8  6]\n",
      "Column Name :  Class\n",
      "Column Contents :  [2 4]\n"
     ]
    }
   ],
   "source": [
    "data[\"Bare Nuclei\"]=data[\"Bare Nuclei\"].astype(\"int64\")\n",
    "for columnData in data.iloc[:,:]:\n",
    "    columnData1=data[columnData]\n",
    "    print('Column Name : ', columnData)\n",
    "    x=columnData1.unique()\n",
    "    print('Column Contents : ',x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e779172",
   "metadata": {},
   "source": [
    ">everything is clean"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a175679",
   "metadata": {},
   "source": [
    "<b>We need to explore the data by visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae44d531",
   "metadata": {},
   "source": [
    "# the implementation of the algorithm "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec442299",
   "metadata": {},
   "source": [
    "<b>First, we need to divide our data into features (X) and labels (y). The dataframe gets divided into X_train,X_test , y_train and y_test. X_train and y_train sets are used for training and fitting the model. The X_test and y_test sets are used for testing the model if it’s predicting the right outputs/labels. we can explicitly test the size of the train and test sets. It is suggested to keep our train sets larger than the test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "838b4f37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "552\n",
      "139\n",
      "552\n",
      "139\n"
     ]
    }
   ],
   "source": [
    "x=data.iloc[:,:9]#slicing the independant variables into two groups...\n",
    "y=data.iloc[:,9]#same thing with the dependant\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.2)\n",
    "#you could see print them and see the len of sets\n",
    "print(len(x_train))\n",
    "print(len(x_test))\n",
    "print(len(y_train))\n",
    "print(len(y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfc020d3",
   "metadata": {},
   "source": [
    "<b>The obtained data contains features of completely different dimensions and scales. Different measures of data properties affect data set modeling inversely,\n",
    "fit_transform() helps to fit the output, and pay attention to StandardScaler is Z-distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "9ba2381d",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc_x=StandardScaler()\n",
    "x_train=sc_x.fit_transform(x_train)\n",
    "x_test=sc_x.fit_transform(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbfab44d",
   "metadata": {},
   "source": [
    "<b>after splitting the data and traing it, we have to execute KNeighborsClassifier and enter K value and other parametrs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "605aff92",
   "metadata": {},
   "outputs": [],
   "source": [
    "classify=KNeighborsClassifier(n_neighbors=7,p=2,metric=\"euclidean\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4faca72d",
   "metadata": {},
   "source": [
    ">to know more about this function,visit:https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "297d22ec",
   "metadata": {},
   "source": [
    "<b>it is time to make classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "5d849d4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "classify.fit(x_train,y_train)\n",
    "y_pred=classify.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "847ce662",
   "metadata": {},
   "source": [
    "<b>confusion_matrix is a func that will help us to evaluate the predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "3bbd6d56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[87  5]\n",
      " [ 2 45]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>2</th>\n",
       "      <th>4</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>87</td>\n",
       "      <td>5</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>45</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>89</td>\n",
       "      <td>50</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted   2   4  All\n",
       "True                  \n",
       "2          87   5   92\n",
       "4           2  45   47\n",
       "All        89  50  139"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,y_pred))\n",
    "pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d56b03b3",
   "metadata": {},
   "source": [
    "<b>what does is the output mean?\n",
    "<li># Take a look at the values 5 and 2, at 5 these are five negative positive predictions and at 2 these two values are two negative positives\n",
    "<li>This will tell you the wrong predictions that occurred\n",
    "<li>On the other hand, values 87,45 are predicted correctly."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e021a144",
   "metadata": {},
   "source": [
    "<blockquote>this pic below will explain it clearly<blockquote>"
   ]
  },
  {
   "attachments": {
    "P,N.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "a2a201a5",
   "metadata": {},
   "source": [
    "![P,N.png](attachment:P,N.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e411e02",
   "metadata": {},
   "source": [
    "classification_report "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79c9c450",
   "metadata": {},
   "source": [
    "<b>we have to evaluate the model so we will call classification_report "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "89251647",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           2       0.98      0.95      0.96        92\n",
      "           4       0.90      0.96      0.93        47\n",
      "\n",
      "    accuracy                           0.95       139\n",
      "   macro avg       0.94      0.95      0.94       139\n",
      "weighted avg       0.95      0.95      0.95       139\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print( classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf227558",
   "metadata": {},
   "source": [
    "<b>what does the output mean?\n",
    "  <ol>\n",
    "<li>precision: Percentage of correct positive predictions relative to total positive predictions.</li>\n",
    "<li>Percentage of correct positive predictions relative to total actual positives.      \n",
    "<li>F1 score ,What percent of positive predictions were correct? so,F1 score is a weighted harmonic mean of precision and recall such that the best score is 1.0 and the worst is 0.0. F1 scores are lower than accuracy measures as they embed precision and recall into their computation. As a rule of thumb, the weighted average of F1 should be used to compare classifier models, not global accuracy.\n",
    "</li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "531edf6b",
   "metadata": {},
   "source": [
    "<b>It is time to calculate the accuracy of our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "ed9d6090",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9496402877697842\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e1a6a3b",
   "metadata": {},
   "source": [
    "<b>now,we will calculate the error rate and this will tell us the optimal K value that we will use it in our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "b79a70fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "error_rate = []\n",
    "for i in range(1,31,2):#we will try values of K and calculate the error rate of thrm\n",
    "    \n",
    "    knn = KNeighborsClassifier(n_neighbors=i)\n",
    "    knn.fit(x_train,y_train)\n",
    "    pred_i = knn.predict(x_test)\n",
    "    error_rate.append(np.mean(pred_i != y_test))\n",
    "#plotting the error rate vs k graph \n",
    "plt.style.use('Solarize_Light2')\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(range(1,16),error_rate,marker=\"o\",markerfacecolor=\"green\",\n",
    "         linestyle=\"dashed\",color=\"red\",markersize=15)\n",
    "plt.title(\"Error rate vs k value\",fontsize=20)\n",
    "plt.xlabel(\"k- values\",fontsize=20)\n",
    "plt.ylabel(\"error rate\",fontsize=20)\n",
    "plt.xticks(range(1,16))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "024b7067",
   "metadata": {},
   "source": [
    "<b>go back and replace the optimal value of K"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dca0c3d",
   "metadata": {},
   "source": [
    "# we finished our algoritm i hope it is useful for you"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0d20a82",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b06e082",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "830ff80e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd74e87c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a67c6703",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffc0c5c2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7130f5f9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22685de0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ac42540",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
